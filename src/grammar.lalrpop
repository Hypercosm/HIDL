use crate::ast::*;

grammar();


// Skip over comments
match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    _
}

pub Namespace: Namespace = {
    "namespace" <name:Ident> 
    <interfaces:Interface*>
    <types:TypeDef*>
    <extensions:Extension*>
     => Namespace{<>}
}

Extension: Extension = {
    <docs:Doc> "extension" <name:Ident> "{" 
        <version:Version>
        <interface:ImplicitInterface?>
        <interfaces:ExtensionInterface*>
        <types:TypeDef*>
    "}"
         => Extension{<>}
}

Interface: Interface = { 
    <docs:Doc> "interface" <name:Ident> "{"
        <v:Version?> 
        <e:Events?>
        <m:Methods?>
    "}" => Interface { name, docs, version: v.unwrap_or_default(), events: e.unwrap_or_default(), methods: m.unwrap_or_default() }
}

ExtensionInterface: ExtensionInterface = { 
    <docs:Doc> "interface" <name:Ident> "{" 
        <e:Events?>
        <m:Methods?>
    "}"
        => ExtensionInterface { name, docs, events: e.unwrap_or_default(), methods: m.unwrap_or_default() }
}

ImplicitInterface: ImplicitInterface = {
    <docs:Doc> "interface" "{"
        <e:Events?>
        <m:Methods?>
    "}" 
        => ImplicitInterface {  docs, events: e.unwrap_or_default(), methods: m.unwrap_or_default() }
}

Version: Version = {
    "version" <UInt> <UInt> <UInt> => (<>)
}

Events: Vec<Func>  = { "events" "{" <Func*> "}" => <> }
Methods: Vec<Func>  = { "methods" "{" <Func*> "}" => <> }

Func: Func = {
    <docs:Doc>
    <name:Ident> "(" <args: Comma<Arg>> ")" <ret:("->" <Type>)?> 
        => Func{<>}
}


Arg: Arg = {
    <name:Ident> ":" <ty:Type> => Arg{<>}
}


// Argument types

Type: Type = {
    PrimType => Type::Primitive(<>),
    Ident => Type::Custom(<>),
    IntType => Type::IntType(<>),
    "[" <key:Type> "]" <value:Type> => Type::Dictionary(Box::new(Dictionary{key, value})),
    "[]" <Type>  => Type::Array(Box::new(<>)),
}

PrimType: PrimType = {
    "string" => PrimType::String,
    "object" => PrimType::Object,
    "uuid" => PrimType::Uuid,
    "bytes" => PrimType::Bytes,
    "bool" => PrimType::Bool,

    "matrix4x4" => PrimType::Matrix4x4,

    "f32" => PrimType::F32,
    "f64" => PrimType::F64,
}


IntType: IntType = {
    UnsignedIntType => IntType::Unsigned(<>),
    SignedIntType   => IntType::Signed(<>), 
}

// These are seperate as only they can back an enum
UnsignedIntType: UnsignedIntType = {
    "u8"  => UnsignedIntType::U8,
    "u16" => UnsignedIntType::U16,
    "u32" => UnsignedIntType::U32,
    "u64" => UnsignedIntType::U64,
    
    "vu8"  => UnsignedIntType::VU8,
    "vu16" => UnsignedIntType::VU16,
    "vu32" => UnsignedIntType::VU32,
    "vu64" => UnsignedIntType::VU64,
}

SignedIntType: SignedIntType = {
    "i8"  => SignedIntType::I8,
    "i16" => SignedIntType::I16,
    "i32" => SignedIntType::I32,
    "i64" => SignedIntType::I64,

    "vi8"  => SignedIntType::VI8,
    "vi16" => SignedIntType::VI16,
    "vi32" => SignedIntType::VI32,
    "vi64" => SignedIntType::VI64,
}

// Typedefs

TypeDef: TypeDef = {
    <docs:Doc> "struct" <name:Ident>  "{" <fields:Struct> "}" 
        => TypeDef{name, docs, kind: TypeKind::Struct(Struct{fields})},
    <docs:Doc> "enum" <name:Ident> "(" <backing:IntType> ")" "{" <fields:Enum> "}"
        => TypeDef{name, docs, kind: TypeKind::Enum(Enum{fields, backing})},
    <docs:Doc> "flags" <name:Ident> "(" <backing:IntType> ")" "{" <fields:Flags> "}"
        => TypeDef{name, docs, kind: TypeKind::Flags(Flags{fields, backing})},
}

Struct = { StructField* }
StructField: StructField = {
    <name:Ident> ":" <ty:Type> => StructField{<>}
}

Enum = { EnumField* }
EnumField: EnumField = {
    <name:Ident> <value:("=" <Int>)?> => EnumField{<>}
}

Flags = { FlagField* }
FlagField: FlagField = {
    // TODO: Allow binary numbers for values
    <name:Ident> "=" <value:UInt> => FlagField{<>}
}



// Terminals

// // Num: u8 = {
// //     r"[0-9]+" => <>.parse().unwrap()
// // }
// Num: u8 = {
//     // TODO: This is a bit hacky, but it works for now
//     Int => <>.try_into().unwrap(),
// }
// Int: i64 = {
//     r"(-)?[0-9]+" => <>.parse().unwrap()
// }

Int: i128 = {
    UInt => <>.into(),
    NegitiveNum => <>,
}

UInt: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
}

NegitiveNum: i128 = {
    r"-[0-9]+" => <>.parse().unwrap()
    // "-44" => -44
}

Ident: String = { r"[a-zA-Z][a-zA-Z0-9_]*" => <>.to_owned() }


Doc: String  = { DocComment? => match <> {
    Some(doc) => doc[3..doc.len()-2].to_owned(),
    None => String::new()
}}
// Regex from https://lalrpop.github.io/lalrpop/lexer_tutorial/001_lexer_gen.html
// I dont know why it works
DocComment = { r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" }

// Combinators

// Beware: https://github.com/lalrpop/lalrpop/issues/645
// List<T>: Vec<T> = { 
//     <v:(<T>)*> => v
// };

Comma<T>: Vec<T> = { 
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};